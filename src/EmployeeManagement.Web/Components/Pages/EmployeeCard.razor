@rendermode InteractiveServer
@using EmployeeManagement.Domain.Entities
@using EmployeeManagement.Web.Interfaces
@using EmployeeManagement.Web.Components
@using CustomComponent
@inject IDialogService DialogService
<div class="card m-3" style="min-width:18rem; max-width:30%">
    <div class="card-header">
        <input type="checkbox" @onchange="Select_Changed" />
        <h3>@Employee.FirstName @Employee.LastName</h3>
    </div>
    <img class="card-img-top" src="@Employee.PhotoPath" style="max-height:400px; width:auto" />

    @if (ShowFooter)
    {
        <div class="card-footer text-center">
            <a href="@($"/employeeDetails/{Employee.Id}")" class="btn btn-primary m-1">View</a>

            <a href="@($"/createOrEditEmployee/{Employee.Id}")" class="btn btn-primary m-1">Edit</a>

            @* <button @onclick="DeleteUser" class="btn btn-danger m-1">Delete</button> *@
            <MudButton @onclick="Delete_Employee" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete"
                Color="Color.Error">
                Delete
            </MudButton>
        </div>
    }
</div>
<ConfirmModal @ref="DeleteConfirmation" OnConfirmationChange="Confirm_Clicked" />
@code {
    [Parameter]
    public Employee Employee { get; set; }
    [Parameter]
    public bool ShowFooter { get; set; }
    [Parameter]
    public EventCallback<bool> OnSelectCheckboxChange { get; set; } = new EventCallback<bool>();
    [Parameter]
    public EventCallback<int> OnDeleteEmployeeAsync { get; set; } = new EventCallback<int>();
    [Inject]
    public IEmployeeService employeeService { get; set; }

    protected ConfirmModalBase DeleteConfirmation { get; set; } = new();

    private async void Select_Changed(ChangeEventArgs e)
    {
        await OnSelectCheckboxChange.InvokeAsync((bool)e.Value);
    }

    public async Task Delete_Employee()
    {
        DeleteConfirmation.ModalBodyText = $"Do you want to delete {Employee.FirstName}";
        DeleteConfirmation.ConfirmButtonText = "Delete";
        DeleteConfirmation.Show_Dialog();
        // await employeeService.DeleteEmployeeAsync(Employee.Id);
        // await OnDeleteEmployeeAsync.InvokeAsync(Employee.Id);
    }

    @* private void OpenDialog()
{
var options = new DialogOptions { CloseOnEscapeKey = true };
DialogService.Show<ConfirmDialog>("Simple Dialog", options);
} *@

    private async Task Confirm_Clicked(bool isConfirmed)
    {
        if (isConfirmed)
        {
            await employeeService.DeleteEmployeeAsync(Employee.Id);
            await OnDeleteEmployeeAsync.InvokeAsync(Employee.Id);
        }
    }
}
