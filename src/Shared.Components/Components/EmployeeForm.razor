@using EmployeeManagement.Domain.Entities;
@using EmployeeManagement.Domain.Enums
@using EmployeeManagement.Services.Interfaces
@using Microsoft.AspNetCore.Components.Forms;
@using MudBlazor
@using Shared.Components.Services
@inject IDepartmentService _departmentService
@inject IEmployeeService _employeeService
@inject RSnackbarService _snackbar
<EditForm Model="@Model" @ref="form">
    <DataAnnotationsValidator />
    @* <MudGrid Spacing="2"> *@
    <MudItem xs="12" sm="12">
        <MudGrid Class="mb-2">
            <MudItem sm="6">
                <InputNumber hidden @bind-Value="Model.Id" />
                <MudTextField T="string"
                              Label="First Name"
                              @bind-Value="Model.FirstName"
                              Required="true"
                              RequiredError="First name is required!"
                              For="@(() => Model.FirstName)" />
            </MudItem>
            <MudItem sm="6">
                <MudTextField T="string"
                              Label="Last Name"
                              @bind-Value="Model.LastName"
                              Required="true"
                              RequiredError="Last name is required!"
                              For="@(() => Model.LastName)" />
            </MudItem>
        </MudGrid>
        <MudGrid Class="mb-2">
            <MudItem sm="6">
                <MudDatePicker Editable="false"
                               Label="DOB"
                               @bind-Date="Model.DoB"
                               Required="true"
                               RequiredError="DOB is required!" />
            </MudItem>
            <MudItem sm="6">
                <MudTextField T="string"
                              @bind-Value="Model.Email"
                              Label="Email"
                              Required="true"
                              RequiredError="Email is required!"
                              For="@(() => Model.Email)" />
            </MudItem>
        </MudGrid>
        <MudGrid Class="mb-2">
            <MudItem sm="6">
                <MudSelect T="Gender"
                           Label="Gender"
                           @bind-Value="Model.Gender"
                           Required="true"
                           RequiredError="Gender is required!">
                    @foreach (var gender in Enum.GetValues<Gender>())
                    {
                        <MudSelectItem Value="gender">@gender</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem sm="6">
                <MudSelect T="int"
                           Label="Department"
                           @bind-Value="Model.DepartmentId"
                           Required="true"
                           RequiredError="Department is required!"
                           For="@(() => Model.DepartmentId)">
                    <MudSelectItem Value="0">Choose Option</MudSelectItem>
                    @foreach (var department in Departments)
                    {
                        <MudSelectItem Value="@department.Id">@department.DepartmentName</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
        </MudGrid>
        <div class="d-flex flex-row gap-4 mb-2 mt-2">
            <MudFileUpload 
                T="IBrowserFile" 
                SuppressOnChangeWhenInvalid="true"
                OnFilesChanged="UploadFile">
                <ActivatorContent>
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.CloudUpload" Disabled="_uploading">
                        @if (_uploading)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Processing</MudText>
                        }
                        else
                        {
                            <MudText>Upload File</MudText>
                        }
                    </MudButton>
                </ActivatorContent>
            </MudFileUpload>
        </div>
        <MudText Typo="Typo.body2">The recommended size for uploading images is 640X320</MudText>
            <div class="d-fex">
                @if (_img is not null)
            {
                    <div style="float:left; position: relative; width: 160px; height: 80px; margin: 10px;">
                            <MudImage ObjectFit="ObjectFit.Cover" Height="80" Width="160" Src="@_img" Alt="img not available" Elevation="25" Class="mr-2 rounded-lg" />
                        @* <div style="position: absolute;top: 0px;left: 0px; z-index: 2990;">
                            <MudIconButton OnClick="@(() => PreviewImage(img.Url, Model.Pictures))" Icon="@Icons.Material.Filled.Image" aria-label="preview" Color="Color.Info" Size="MudBlazor.Size.Small"></MudIconButton>
                        </div>
                        <div style="position: absolute;top: 0px;right: 0px; z-index: 2990;">
                            <MudIconButton OnClick="@(() => DeleteImage(img))" Icon="@Icons.Material.Filled.Delete" aria-label="delete" Color="Color.Error" Size="MudBlazor.Size.Small"></MudIconButton>
                        </div> *@
                    </div>
            }
        </div>
    </MudItem>
    <MudGrid Class="mud-dialog-actions justify-end justify-content-end mb-2">
        <MudItem>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton Color="Color.Primary" ButtonType="ButtonType.Button" OnClick="ValidSubmit">Save</MudButton>
            <MudButton Color="Color.Primary" ButtonType="ButtonType.Button" OnClick="ValidSubmitAndNew">Save And New</MudButton>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    [Parameter]
    public Employee Model { get; set; } = default!;

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; } = default!;
    private bool _uploading;
    private string _img;

    private IEnumerable<Department> Departments { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        Departments = await _departmentService.GetDepartmentsAsync();
    }

    EditForm form;

    private async Task Cancel()
    {
        MudDialog.Close(DialogResult.Cancel());
    }

    private async Task ValidSubmit()
    {
        if (!form.EditContext!.Validate())
            return;
        Employee? response;
        if (Model.Id == 0)
            response = await _employeeService.CreateEmployeeAsync(Model);
        else
            response = await _employeeService.UpdateEmployeeAsync(Model);
        if (response is not null)
        {
            MudDialog.Close(DialogResult.Ok(true));
            _snackbar.Show_Snackbar("Saved successful", Severity.Success);
        }
    }

    private async Task ValidSubmitAndNew()
    {
        if (!form.EditContext!.Validate())
            return;
        var response = await _employeeService.CreateEmployeeAsync(Model);
        if (response is not null)
        {
            _snackbar.Show_Snackbar("Saved successful", Severity.Success);
            Model = new Employee();
        }
    }

    private async Task UploadFile(InputFileChangeEventArgs e)
    {
        try
        {
            _uploading = true;
            var file = e.File;
            var fileStream = e.File.OpenReadStream(512000 * 100);
            var buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);
            var base64String = Convert.ToBase64String(buffer);
            _img = $"data:{file.ContentType};base64,{base64String}";
        }
        catch (Exception ex)
        {
            
            throw;
        }
        _uploading = true;
        await Task.Delay(2000);
        _uploading = false;
    }
}
