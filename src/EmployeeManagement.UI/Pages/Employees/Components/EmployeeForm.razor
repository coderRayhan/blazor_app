@using EmployeeManagement.Domain.Entities;
@using EmployeeManagement.Domain.Enums
@using EmployeeManagement.UI.Interfaces
@using EmployeeManagement.UI.Services
@using Microsoft.AspNetCore.Components.Forms;
@using MudBlazor
@inject IDepartmentService _departmentService
@inject IEmployeeService _employeeService
@inject RSnackbarService _snackbar
<EditForm Model="@Model" @ref="form" OnValidSubmit="ValidSubmit">
    <DataAnnotationsValidator />
    @* <MudGrid Spacing="2"> *@
    <MudItem xs="12" sm="12">
        <MudGrid>
            <MudItem sm="6">
                <MudTextField T="string"
                              Label="First Name"
                              @bind-Value="Model.FirstName"
                              Required="true"
                              RequiredError="First name is required!" />
                <ValidationMessage For="@(() => Model.LastName)" />
            </MudItem>
            <MudItem sm="6">
                <MudTextField T="string"
                              Label="First Name"
                              @bind-Value="Model.LastName"
                              Required="true"
                              RequiredError="Last name is required!" />
            </MudItem>
        </MudGrid>
        <MudGrid>
            <MudItem sm="6">
                <MudDatePicker Editable="true"
                               Label="DOB"
                               @bind-Value="Model.DoB"
                               Required="true"
                               RequiredError="DOB is required!" />
            </MudItem>
            <MudItem sm="6">
                <MudTextField T="string"
                              @bind-Value="Model.Email"
                              Label="Email"
                              Required="true"
                              RequiredError="Email is required!"
                              For="@(() => Model.Email)" />
            </MudItem>
        </MudGrid>
        <MudGrid>
            <MudItem sm="6">
                <MudSelect T="Gender"
                           Label="Gender"
                           @bind-Value="Model.Gender"
                           Required="true"
                           RequiredError="Gender is required!">
                    @foreach (var gender in Enum.GetValues<Gender>())
                    {
                        <MudSelectItem Value="gender">@gender</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem sm="6">
                <MudSelect T="int"
                           Label="Department"
                           @bind-Value="Model.DepartmentId"
                           Required="true"
                           RequiredError="Department is required!">
                    @foreach (var department in Departments)
                    {
                        <MudSelectItem Value="@department.Id">@department.DepartmentName</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
        </MudGrid>
    </MudItem>
    <MudGrid Class="mud-dialog-actions justify-end justify-content-end">
        <MudItem>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton Color="Color.Primary" ButtonType="ButtonType.Submit">Submit</MudButton>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    [Parameter]
    public Employee Model { get; set; } = default!;

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; } = default!;

    private IEnumerable<Department> Departments { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        Departments = await _departmentService.GetDepartmentsAsync();
    }

    EditForm form;

    private async Task Cancel()
    {
        MudDialog.Close(DialogResult.Cancel());
    }

    private async Task ValidSubmit()
    {
        var response = await _employeeService.CreateEmployeeAsync(Model);
        if (response is not null)
        {
            MudDialog.Close(DialogResult.Ok(true));
            _snackbar.Show_Snackbar("Saved successful", Severity.Success);
        }
    }
}
