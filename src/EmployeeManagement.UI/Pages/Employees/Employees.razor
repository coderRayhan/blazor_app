@page "/pages/employees"
@using EmployeeManagement.UI.Interfaces
@using EmployeeManagement.UI.Pages.Employees.Components
@using EmployeeManagement.Domain.Entities;
@using EmployeeManagement.UI.Services
@using Microsoft.JSInterop
@using MudBlazor
@inject FormDialogService dialogService
@inject IJSRuntime jsruntime
@inject IEmployeeService EmployeeService
<MudGrid Class="justify-end">
    <MudItem>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" StartIcon="@Icons.Material.Filled.Add"
                   IconColor="Color.Surface" Disabled="false" OnClick="RefreshData">
            Refresh
        </MudButton>
    </MudItem>
    <MudItem>
        <MudButton Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" StartIcon="@Icons.Material.Filled.Add"
                   IconColor="Color.Surface" Disabled="false" OnClick="OpenFormDialog">
            Add New
        </MudButton>
    </MudItem>
</MudGrid>

<MudDataGrid 
    T="Employee"
    Loading="@_loading"
    @ref="_table" 
    MultiSelection="true"
    SortMode="SortMode.Multiple"
    ServerData="@(ServerReload)" 
    >
    <Columns>
        <PropertyColumn Property="x => x.FirstName" Title="First Name" Sortable="true" />
        <PropertyColumn Property="x => x.LastName" Title="Last Name" />
        <PropertyColumn Property="x => x.Email" Title="Email" />
        <PropertyColumn Property="x => x.DoB" Title="Date of Birth" />
        <PropertyColumn Property="x => x.Gender" Title="Gender" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Employee" />
    </PagerContent>
</MudDataGrid>
@code {
    public IEnumerable<Employee> EmployeeList { get; set; } = [];

    private MudDataGrid<Employee> _table = default!;
    private bool _loading;

    // private async Task OnCreate()
    // {
    //     var Employee = new Employee();
    //     var param = new DialogParameters<EmployeeFormDialog>
    //     {
    //         {x => x.Model, Employee}
    //     };
    //     await ShowFormDialog("Create Employee", param);
    // }

    // private async Task ShowFormDialog(string title, DialogParameters param)

    // {
    //     var options = new DialogOptions
    //         {
    //             CloseButton = true,
    //             CloseOnEscapeKey = false,
    //             MaxWidth = MaxWidth.Medium,
    //             FullWidth = true,
    //             DisableBackdropClick = true,

    //         };
    //     var dialog = DialogService.Show<EmployeeFormDialog>(title, param, options);
    //     var state = await dialog.Result;
    //     if (!state.Canceled)
    //     {
    //         await _table.ReloadServerData();
    //     }
    // }


    //calling dynamic form dialog
    private async void OpenFormDialog()
    {
        var dialogRef = dialogService.ShowFormDialog<EmployeeForm, Employee>("Create Form", new Employee());
        var state = await dialogRef.Result;
        if (!state.Canceled)
        {
            await _table.ReloadServerData();
        }
    }

    private async Task<GridData<Employee>> ServerReload(GridState<Employee> state)
    {
        try
        {
            _loading = true;
            // Query.CurrentUser = UserProfile;
            // Query.OrderBy = state.SortDefinitions.FirstOrDefault()?.SortBy ?? "Id";
            // Query.SortDirection = state.SortDefinitions.FirstOrDefault()?.Descending ?? true ? SortDirection.Descending.ToString() : SortDirection.Ascending.ToString();
            // Query.PageNumber = state.Page + 1;
            // Query.PageSize = state.PageSize;
            // var result = await Mediator.Send(Query).ConfigureAwait(false);
            var list = await EmployeeService.GetEmployeesAsync();

            return new GridData<Employee> { TotalItems = list.Count(), Items = list };
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task RefreshData()
    {
        await _table.ReloadServerData();
    }
}